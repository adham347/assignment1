-- For asking the user you don't have to get inputs, just assume variables.
 
Exercise 2
Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user.

  int x;
  if(x%2 == 0){
    print("number is even");
  }
  else
  {
    print("number is odd");
  }
______________________________________________________________________________________________________________
 
Exercise 3
Take a list, say for example this one:
 
  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
and write a program that prints out all the elements of the list that are less than 5.

	for(int i=0;i<a.length;i++){
		if(a[i]<5){
			print(a[i]);
		}
	}
______________________________________________________________________________________________________________
 
 
Exercise 4
Create a program that asks the user for a number and then prints out a list of all the divisors of that number.

	int number;
	for (var i = 1; i <= number; i++) {
		if (number % i == 0) {
		print(i);
		}
	}
 
If you don’t know what a divisor is, it is a number that divides evenly into another number. For example, 13 is a divisor of 26 because 26 / 13 has no remainder.
______________________________________________________________________________________________________________
 
 
Exercise 5
Take two lists, for example:
 
  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
 
  b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
and write a program that returns a list that contains only the elements that are common between them (without duplicates). Make sure your program works on two lists of different sizes.

  var c = [];

  for (var i in a) {
    for (var j in b) {
      if (i == j) {
        c.add(i);
      }
    }
  }
  print(c);
______________________________________________________________________________________________________________
 
 
Exercise 6
Ask the user for a string and print out whether this string is a palindrome or not.
 
A palindrome is a string that reads the same forwards and backwards.

	String input;
	String revInput = input.split('').reversed.join('');
  
	if(input == revInput)
		print("The word is palindrome");
	else
		print("The word is not a palindrome");
______________________________________________________________________________________________________________
 
Exercise 7
Let’s say you are given a list saved in a variable:
 
a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]. 
Write a Dart code that takes this list and makes a new list that has only the even elements of this list in it.

	var a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100];
	var l =[];
	for(int i = 0; i<a.length;i++){
		if(a[i]%2 == 0){
			l.add(a[i]);
		}
	}
______________________________________________________________________________________________________________
 
Exercise 8
Make a two-player Rock-Paper-Scissors game against computer.
 
Ask for player’s input, compare them, print out a message to the winner.

import 'dart:io';
import 'dart:math';

void main() {
  print("Welcome to Rock, Paper, Scissors");
  print("type (exit) to close the game");
  final random = Random();

  Map<String, String> rules = {
    "rock": "scissors",
    "scissors": "paper",
    "paper": "rock"
  };

  // Initial score
  int user = 0;
  int comp = 0;

  // Options for computer to choose
  List<String> options = ["rock", "paper", "scissors"];

  // Actual game
  while (true) {
    String compChoice = options[random.nextInt(options.length)];
    stdout.write("\nPlease choose Rock, Paper or Scissors: ");
    String userChoice = stdin.readLineSync().toLowerCase();

    if (userChoice == "exit") {
      print("\nYou: $user Computer: $comp\nBye Bye!");
      break;
    }

    if (!options.contains(userChoice)) {
      print("Incorrect choice");
      continue;
    } else if (compChoice == userChoice) {
      print("We have a tie!");
    } else if (rules[compChoice] == userChoice) {
      print("Computer wins: $compChoice vs $userChoice");
      comp += 1;
    } else if (rules[userChoice] == compChoice) {
      print("You win: $userChoice vs $compChoice");
      user += 1;
    }
  }
}
______________________________________________________________________________________________________________
 
Exercise 9
Generate a random number between 1 and 100. Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right.
 
Keep track of how many guesses the user has taken, and when the game ends, print this out.

import 'dart:io';
import 'dart:math';

void main() {
  print("Type exit to quit the game");
  guessingGame();
}

guessingGame() {
  final random = Random();
  int randNumber = random.nextInt(100);
  int attempt = 0;

  while (true) {
    attempt += 1;
    stdout.write("Please choose a number between 0 and 100: ");
    String chosenNumber = stdin.readLineSync();

    // Make sure user does not go out of limits
    if (chosenNumber.toLowerCase() == "exit") {
      print("\nBye");
      break;
    } else if (int.parse(chosenNumber) > 100) {
      print("Please do not go over 100");
      continue;
    }

    // Main logic
    if (int.parse(chosenNumber) == randNumber) {
      print("Bingo! You tried $attempt times\n");
      continue;
    } else if (int.parse(chosenNumber) > randNumber) {
      print("You are higher");
      continue;
    } else {
      print("You are lower");
      continue;
    }
  }
}
______________________________________________________________________________________________________________
 
Exercise 10
Ask the user for a number and determine whether the number is prime or not.
 
Do it using a function

import 'dart:io';

void main() {
  stdout.write("Please give us a number: ");
  int chosenNumber = int.parse(stdin.readLineSync());

  checkPrime(chosenNumber);
}

void checkPrime(int number) {
  // List comprehensions
  List<int> a = [
    for (var i = 1; i <= number; i++)
      if (number % i == 0) i
  ];

  // Check for prime
  a.length == 2
      ? print("The chosen number is a prime")
      : print("The chosen number is not a prime");
}
______________________________________________________________________________________________________________
 
Exercise 11
Write a program that takes a list of numbers for example
 
a = [5, 10, 15, 20, 25]
and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function.

import 'dart:math';

void main() {
  // Initialize the random list
  final random = Random();
  List<int> randList = List.generate(10, (_) => random.nextInt(100));

  // Pass it to the function
  print(randList);
  print(newList(randList));
}

// Function that returns the first and the last element of given list
List<int> newList(List<int> initialList) {
  return [initialList.first, initialList.last];
}
______________________________________________________________________________________________________________
 
Exercise 12
Write a program that asks the user how many Fibonnaci numbers to generate and then generates them. Take this opportunity to think about how you can use functions.
 
Make sure to ask the user to enter the number of numbers in the sequence to generate.

import 'dart:io';

void main() {
  stdout.write("How many Fibonacci numbers do you want? ");
  int chosenNumber = int.parse(stdin.readLineSync());

  List<int> result = fibonacciNumbers(chosenNumber);
  print(result);
}

// Function to calulcate the Fibonacci numbers
List<int> fibonacciNumbers(int chosenNumber) {
  List<int> fibList = [1, 1];

  for (var i = 0; i < chosenNumber; i++) {
    fibList.add(fibList[i] + fibList[i + 1]);
  }
  return fibList;
}
______________________________________________________________________________________________________________
 
Exercise 13
Write a program (function) that takes a list and returns a new list that contains all the elements of the first list minus all the duplicates.

import 'dart:math';

void main() {
  final random = Random();
  List<int> randList = List.generate(10, (_) => random.nextInt(10));

  print("Initial list is $randList\n");
  print("Cleaned list is ${removeDuplicates(randList)}");
}

List<int> removeDuplicates(List<int> initialList) {
  return initialList.toSet().toList();
}
______________________________________________________________________________________________________________
 
Exercise 14
Write a program (using functions!) that asks the user for a long string containing multiple words. Print back to the user the same string, except with the words in backwards order.
 
For example, say I type the string:
 
  My name is Michele
Then I would see the string:
 
  Michele is name My
  
import 'dart:io';

void main() {
  stdout.write("Please give a sentence: ");
  String sentence = stdin.readLineSync();

  reverseSentence(sentence);
}

void reverseSentence(String sentence) {
  /* Split the sentence into a list of words
  Reverse the list, then join the words back */
  String a = sentence.split(" ").reversed.toList().join(" ");
  print(a);
}
______________________________________________________________________________________________________________
 
Exercise 15
Write a password generator in Dart. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters, numbers, and symbols. The passwords should be random, generating a new password every time the user asks for a new password. Include your run-time code in a main method.
 
Ask the user how strong they want their password to be. For weak passwords, pick a word or two from a list.
 
Do not use the generated password in your real accounts. Use 1password.

import 'dart:convert';
import 'dart:io';
import 'dart:math';

void main() {
  stdout.write("How strong a password do you want? Weak, Medium or Strong: ");
  String choice = stdin.readLineSync().toLowerCase();

  passwordGenerator(choice);
}

// Create a random sequence of characters
void shuffleGenerator(int strength) {
  final random = Random.secure();
  List<int> intList = List.generate(strength, (_) => random.nextInt(255));
  List charList = base64UrlEncode(intList).split('').toList();
  charList.shuffle();
  print("\nYour password is: ${charList.join('')}\n");
}

void passwordGenerator(String strength) {
  if (strength == "weak") {
    shuffleGenerator(5);
  } else if (strength == "medium") {
    shuffleGenerator(15);
  } else if (strength == "strong") {
    shuffleGenerator(25);
  } else {
    print("Incorrect word is given");
  }
}
______________________________________________________________________________________________________________
 
Exercise 16
Create a program that will play the “cows and bulls” game with the user. The game works like this:
 
Randomly generate a 4-digit number. Ask the user to guess a 4-digit number. For every digit the user guessed correctly in the correct place, they have a “cow”. For every digit the user guessed correctly in the wrong place is a “bull.”
Every time the user makes a guess, tell them how many “cows” and “bulls” they have. Once the user guesses the correct number, the game is over. Keep track of the number of guesses the user makes throughout the game and tell the user at the end.
______________________________________________________________________________________________________________
 
Exercise 17
Time for some fake graphics! Let’s say we want to draw game boards that look like this:
 
 --- --- --- 
|   |   |   | 
 --- --- ---  
|   |   |   | 
 --- --- ---  
|   |   |   | 
 --- --- --- 
This one is 3x3 (like in tic tac toe).
 
Ask the user what size game board they want to draw, and draw it for them to the screen using Dart’s print statement.
______________________________________________________________________________________________________________
 
Exercise 18
As you may have guessed, we are trying to build up to a full tic-tac-toe board.
For now, we will simply focus on checking whether someone has WON the game, not worrying about how the moves were made.
 
If a game of Tic Tac Toe is represented as a list of lists, like so:
 
game = [[1, 2, 0],
        [2, 1, 0],
        [2, 1, 1]]
where a 0 means an empty square, a 1 means that player 1 put their token in that space, and a 2 means that player 2 put their token in that space.
 
Your task: given a 3 by 3 list of lists that represents a Tic Tac Toe game board, tell whether anyone has won, and tell which player won, if any.
 
A Tic Tac Toe win is 3 in a row - either in a row, a column, or a diagonal. Don’t worry about the case where TWO people have won - assume that in every board there will only be one winner.
______________________________________________________________________________________________________________
 
Exercise 19
In a previous exercise we explored the idea of using a list of lists as a “data structure” to store information about a tic tac toe game. In a tic tac toe game, the “game server” needs to know where the Xs and Os are in the board, to know whether player 1 or player 2 (or whoever is X and O) won.
 
There has also been an exercise (17) about drawing the actual tic tac toe gameboard using text characters.
 
The next logical step is to deal with handling user input. When a player (say player 1, who is X) wants to place an X on the screen, they can’t just click on a terminal. So you are going to approximate this clicking simply by asking the user for a coordinate of where they want to place their piece.
______________________________________________________________________________________________________________
 
Exercise 20
In 3 previous exercises, we built up a few components needed to build a Tic Tac Toe game in Dart:
 
Draw the Tic Tac Toe game board
Checking whether a game board has a winner
Handle a player move from user input
The next step is to put all these three components together to make a two-player Tic Tac Toe game!
 
Your challenge in this exercise is to use the functions from those previous exercises all together in the same program to make a two-player game that you can play with a friend. There are a lot of choices you will have to make when completing this exercise, so you can go as far or as little as you want with it.
 
Here are a few things to keep in mind:
 
You should keep track of who won - if there is a winner, show a congratulatory message on the screen.
If there are no more moves left, don’t ask for the next player’s move!
:notes: Keep in mind, the current solution is not just a copy pase of functions from the previous exercises, but rather a rework of them.
______________________________________________________________________________________________________________
 
Exercise 21
You, the user, will have in your head a number between 0 and 100. The program will guess a number, and you, the user, will say whether it is too high, too low, or your number.
 
At the end of this exchange, your program should print out how many guesses it took to get your number.
______________________________________________________________________________________________________________
 
Exercise 22
Implement a function that takes as input three variables, and returns the largest of the three. Do this without using the Dart max() function!
 
The goal of this exercise is to think about some internals that Dart normally takes care of for us. All you need is some variables and if statements!
______________________________________________________________________________________________________________
 
 
Exercise 23
In this exercise, the task is to write a function that picks a random word from a list of words from the SOWPODS dictionary.
 
Download this file and save it in the same directory as your Dart code. Each line in the file contains a single word.
 
Use the Dart random library for picking a random word.
______________________________________________________________________________________________________________
 
Exercise 24
In the game of Hangman, a clue word is given by the program that the player has to guess, letter by letter. The player guesses one letter at a time until the entire word has been guessed. (In the actual game, the player can only guess 6 letters incorrectly before losing).
 
Let’s say the word the player has to guess is EVAPORATE.
For this exercise:
 
Write the logic that asks a player to guess a letter and displays letters in the clue word that were guessed correctly. For now, let the player guess an infinite number of times until they get the entire word.
 
As a bonus, keep track of the letters the player guessed and display a different message if the player tries to guess that letter again.
 
Remember to stop the game when all the letters have been guessed correctly! Don’t worry about choosing a word randomly or keeping track of the number of guesses the player has remaining - we will deal with those in a future exercise.
______________________________________________________________________________________________________________
 
Exercise 25
In this exercise, we will finish building Hangman. In the game of Hangman, the player only has 6 incorrect guesses (head, body, 2 legs, and 2 arms) before they lose the game.
 
In Part 1, we loaded a random word list and picked a word from it.
In Part 2, we wrote a logic for guessing the letter and displaying that information to user.
In this exercise, we have to put it all together and add logic for handling guesses.
 
Copy your code from Parts 1 and 2 into a new file as a starting point. Now add the following features:
 
Only let the user guess 6 times, and tell the user how many guesses they have left.
Keep track of the letters user guessed. If the user guesses a letter they had already guessed, don’t penalize them - let them guess again.
Optional additions:
 
When the player wins or loses, let them start a new game.
Rather than telling the user “You have 4 incorrect guesses left”, display some picture art for the Hangman. This is challenging - do the other parts of the exercise first!
Your solution will be a lot cleaner if you make use of functions to help you!
